Robotime

Robotime is a [[http://en.wikipedia.org/wiki/Robots_(computer_game)][robots]]-like game made with [[http://cliki.net][Common Lisp]]
It is made for the [[http://dto.github.com/notebook/2010expo.html][2010 International Lisp Games Expo]] and for the
[[http://www.games-creators.org/wiki/Novendiales][Novendiales(fr)]] (the theme was "time control"). A screenshot is
available [[file:screenshot.png][here]].

* Install and play
** Dependencies
You need a correct Common Lisp implementation (look at [[http://sbcl.sourceforge.net/][SBCL]] for
Unix-based systems and [[http://www.clozure.com/clozurecl.html][Clozure CL]] for Windows or OS X).
Also, be sure to have [[http://www.cliki.net/asdf][ASDF]] installed (provided with SBCL, don't know
for Clozure CL).
There are only two libraries needed for robotime: [[http://www.cliki.net/Alexandria][Alexandria]] and
[[http://github.com/sykopomp/until-it-dies][Until It Dies]].

*** Alexandria
You can easily install Alexandria with [[http://www.cliki.net/ASDF-Install][ASDF-Install]]:

#+BEGIN_SRC common-lisp
(require :asdf)
(require :asdf-install)
(asdf-install:install 'alexandria)
#+END_SRC

*** Until It Dies
Since Until It Dies is a fairly new library, it's only available
through the git repo at github, and robotime needs it's devel
branch. Basically, here are the steps to install it (on an Unix-based
system):

#+BEGIN_SRC shell
$ cd ~/.sbcl/site/
$ git clone -b devel http://github.com/sykopomp/until-it-dies.git
$ ln -s `pwd`/until-it-dies/*.asd ~/.sbcl/systems/
#+END_SRC

You'll also need to install [[http://common-lisp.net/project/cl-opengl/][cl-opengl]] (available through asdf-install,
like alexandria) and [[http://github.com/patzy/glop][glop]] (install it with the same method as
UID). 

If you encounter any problem with UID, you might try to use the commit
~18c4895bc2bc0512a4425ab2ef23550b186ac175~ (with =git checkout=).
** Robotime
You can now install robotime:

#+BEGIN_SRC shell
$ hg clone http://hg.awesom.eu/robotime/
$ ln -s `pwd`/robotime/robotime.asd ~/.sbcl/systems/
#+END_SRC

And to launch it:

#+BEGIN_SRC shell
$ cd robotime
$ ./robotime.sh
#+END_SRC

* Gameplay
Robotime is a robots-like game. Robots is an old turn-based game (you
can test the original one by installing ~bsdgames~ if you're under
Linux) with a very simple principle: "Robots is played on a
two-dimensional rectangular grid. The objective of the game is to
escape from a number of robots, which have been programmed with only a
single objective: to kill the player." (from Wikipedia).

Robotime has some differences with the original robots games:


** Time control
You can control the time in both directions (forward and backward). If
you go back in the time, robots will backtrack and you'll lose some
power. If you advance the time, robots will move in your direction
and you'll gain power. You can also gain power with some bonus. When
you control the time you can't move, so be carefull not to be caught
by robots. If you die, you'll simply be teleported somewhere else on
the grid.

** Bonus
There are two kinds of bonus in the game, which appears and disappears
randomly if the player don't take them:
    - A power bonus which increase your power
    - A blast bonus which gives you one more blast. You can use a
      blast by pressing space, it'll blow some robots that are near
      you.

When you go back in the time, bonus may reappear if you didn't take them.
** The grid
The grid is a 20x40 isometric grid

* Conclusion
** Lisp
Lisp is very usefull for rapid game prototyping. The game had to be
done in nine days, but after 2 days it was already playable (with
awful graphics). [[http://en.wikipedia.org/wiki/Common_Lisp_Object_System][CLOS]] is very nice to use and provides usefull things
(around methods etc.). Also,  [[http://www.paulgraham.com/onlisp.htm][macros]] allows you to save a lot of lines of
code. By example, here's how the power bonus is defined:

#+BEGIN_SRC common-lisp
(defvar *power-bonus-tile* (load-image "bonus.png"))
(new-bonus power *power-bonus-tile*
  (add-power player 10))
#+END_SRC

And here's how it would be defined without the =new-bonus= macro:

#+BEGIN_SRC common-lisp
(defclass power-bonus (bonus) 
  ())
(defmethod draw ((bonus power-bonus))
  (when (alivep bonus)
    (draw-at (x bonus) (y bonus) *power-bonus-tile*)))
(defmethod collision ((player player) (bonus power-bonus))
  (when (alivep bonus)
    (add-power player 10))))))
#+END_SRC

It might be ok for some bonus only, but with the =new-bonus= macro I
can define easily a lot of new bonus, without repeating everytime the
same code.

** Libraries
Common Lisp has [[http://www.cliki.net/Library][a lot]] of libraries, but when it comes to games related
libraries, there are only two or three libraries. Or rather, there
*were* two or three libraries, because those dto's ILGE has motived
some people to work on games related libraries, and now there are much
more good games libs and bindings (see [[http://www.cliki.net/LispGameJam][here]]). Even if most of them are
not officially released and still in developpement, they're quite
usable, and if you encounter some bugs you can still contact the
authors on ~#lisp~ or ~#lispgames~.

** Graphic Stuff
[[http://3bb.cc/blog/2010/07/08/igle 2010 postmortem/][3b's entry]] made me discover [[http://opengameart.org/][OpenGameArt.org]]. Those kinds of site are
really usefull, but really lack of content. I know a bit of gimp,
inkscape and blender, but I don't have the knowledge to create my own
graphic stuff. I think graphics are what free games miss the most, and
sites like OpenGameArt might help with that, but apparently they're
not really known from graphists (but, do graphists really care about
free sofwares ?).

The graphics I used are:
  - [[http://opengameart.org/content/knights-monsters-stairs-more][Knights, monsters, stairs & more]], by artisticdude, licensed as
    GPLv3
  - [[http://opengameart.org/content/towers-of-defense][Towers of defense]], by bart, public domain
  - [[http://opengameart.org/content/freeciv-ft-tileset-terrain2png][FreeCiv FT Tileset: terrain2]], licensed as GPLv2
  - The bonus sphere was made with inkscape with [[http://ryanler.wordpress.com/2007/02/16/simple-bubble-in-inkscape-orb-ball-bubble/][this post]].

* Contact
Any feedback, suggestions, bug reports, etc. is welcome at ~#lispgames~
(~irc.freenode.org~) or in french at ~#GCN~ (~irc.langochat.org~).
